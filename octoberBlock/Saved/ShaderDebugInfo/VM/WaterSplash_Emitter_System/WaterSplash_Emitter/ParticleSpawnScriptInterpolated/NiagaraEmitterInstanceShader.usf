#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_UniformRangedFloat005_Minimum;
	float Constants_Emitter_UniformRangedFloat005_Maximum;
	int Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float Constants_Emitter_UniformRangedFloat003_Minimum;
	float Constants_Emitter_UniformRangedFloat003_Maximum;
	int Constants_Emitter_UniformRangedFloat003_RandomSeed;
	float Constants_Emitter_UniformRangedFloat004_Minimum;
	float Constants_Emitter_UniformRangedFloat004_Maximum;
	int Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float4 Constants_Emitter_InitializeParticle_Color;
	float2 Constants_Emitter_InitializeParticle_SpriteSize;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	int Constants_Emitter_SphereLocation_RandomSeed;
	float Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float Constants_Emitter_SphereLocation_SphereRadius;
	float3 Constants_Emitter_SphereLocation_NonUniformScale;
	float3 Constants_Emitter_SphereLocation_Offset;
	int Constants_Emitter_SphereLocation_SpawnGroupMask;
	float Constants_Emitter_UniformRangedFloat_Minimum;
	float Constants_Emitter_UniformRangedFloat_Maximum;
	int Constants_Emitter_UniformRangedFloat_RandomSeed;
	float Constants_Emitter_AddVelocityInCone_ConeAngle;
	float Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	float3 Constants_Emitter_AddVelocityInCone_ConeAxis;
	float Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	float3 Constants_Emitter_UniformRangedVector_Minimum;
	float3 Constants_Emitter_UniformRangedVector_Maximum;
	int Constants_Emitter_UniformRangedVector_RandomSeed;
	float3 Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	float3 Constants_Emitter_InitialMeshOrientation_Rotation;
	float3 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_Drag_Drag;
	float Constants_Emitter_Drag_RotationalDrag;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_UniformRangedFloat005_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat005_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat003_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat003_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat003_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat004_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat004_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float2 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	int PREV_Constants_Emitter_SphereLocation_RandomSeed;
	float PREV_Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float PREV_Constants_Emitter_SphereLocation_SphereRadius;
	float3 PREV_Constants_Emitter_SphereLocation_NonUniformScale;
	float3 PREV_Constants_Emitter_SphereLocation_Offset;
	int PREV_Constants_Emitter_SphereLocation_SpawnGroupMask;
	float PREV_Constants_Emitter_UniformRangedFloat_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat_RandomSeed;
	float PREV_Constants_Emitter_AddVelocityInCone_ConeAngle;
	float PREV_Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	float3 PREV_Constants_Emitter_AddVelocityInCone_ConeAxis;
	float PREV_Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	float3 PREV_Constants_Emitter_UniformRangedVector_Minimum;
	float3 PREV_Constants_Emitter_UniformRangedVector_Maximum;
	int PREV_Constants_Emitter_UniformRangedVector_RandomSeed;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_Rotation;
	float3 PREV_Constants_Emitter_GravityForce_Gravity;
	float PREV_Constants_Emitter_Drag_Drag;
	float PREV_Constants_Emitter_Drag_RotationalDrag;
	float PREV_Constants_Emitter_FloatFromCurve_ScaleCurve;
	float3 PREV_Constants_Emitter_ScaleColor_ScaleRGB;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_VectorFromCurve
{
	float CurveIndex;
};

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float3 MeshScaleFactor;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleMeshSize
{
	float3 InitialMeshScale;
	float3 ScaleFactor;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float3 Scale;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitialMeshOrientation
{
	bool Temp;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SphereLocation SphereLocation;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitialMeshOrientation
{
	float3 OrientationAxis;
	int OrientationCoordinateSpace;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedVector
{
	float3 Maximum;
	float3 Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat005
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat004
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat003
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SphereLocation
{
	float3 NonUniformScale;
	float3 Offset;
	int RandomSeed;
	int SpawnGroupMask;
	float SphereRadius;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_InitialMeshOrientation
{
	float3 OrientationAxis;
	float3 Rotation;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float3 MeshScale;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Constants_Emitter_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Constants_Emitter_Drag Drag;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_SphereLocation SphereLocation;
	FParamMap0_Constants_Emitter_UniformRangedFloat UniformRangedFloat;
	FParamMap0_Constants_Emitter_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_Constants_Emitter_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_Constants_Emitter_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_Constants_Emitter_UniformRangedVector UniformRangedVector;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0
{
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleMeshSize ScaleMeshSize;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UniformRangedVector UniformRangedVector;
	FParamMap0_VectorFromCurve VectorFromCurve;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void NormalizedAngleToDegrees001_Emitter_Func_(out float Out_NewOutput, inout FSimulationContext Context);
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context);
void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void SphereLocation_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void PolarToCartesianCoordinates_Func_(float In_Theta, float In_Radius, float In_Period, out float2 Out_XY, out float Out_X, out float Out_Y, out float2 Out_dXdY, out float Out_dX, out float Out_dY, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void RandomVectorInCone_Func_(float In_ConeAngle, float In_ConePointDistribution, bool In_EnableCurvature, float In_ConeCurvature, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, out float3 Out_NormalizedVector, inout FSimulationContext Context);
void RemapValueRange_Func_(float In_INPUT_VAR, float In_InputLow, float In_InputHigh, float In_TargetLow, float In_TargetHigh, out float Out_Remapped, inout FSimulationContext Context);
void AddVelocityInCone_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result);
void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context);
void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context);
void AddVelocityInCone_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context);
void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result);
void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context);
void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleVectorCurve_EmitterScaleFactorVectorCurve(float In_X, out float3 Out_Value);
void VectorFromCurve_Emitter_Func_(out float3 Out_Value, inout FSimulationContext Context);
void ScaleMeshSize_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant22 = false;
	int Constant23 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant23);
	bool Result1 = Constant22 && Result;
	int Constant24 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant24);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant25 = 0;
	int Constant26 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant25;
	Seed3_IfResult = Constant26;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant27 = -1;
	int Constant28 = -1;
	int Constant29 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant27;
	Seed2_IfResult1 = Constant28;
	Seed3_IfResult1 = Constant29;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant18 = (0);
	bool Constant19 = false;
	int Constant20 = 0;
	int Constant21 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant18, In_OverrideSeed, Constant20, Constant21, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant16 = 0;
	bool Constant17 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedFloat005.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedFloat005.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedFloat005.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant16;
	Override_IfResult = Constant17;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void UniformRangedFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant34 = 0;
	bool Constant35 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.UniformRangedFloat003.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.UniformRangedFloat003.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.UniformRangedFloat003.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant34;
	Override_IfResult1 = Constant35;
	}
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.UniformRangedFloat003.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result1;
}

void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant40 = 0;
	bool Constant41 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.MapSpawn.UniformRangedFloat004.OverrideRandomness)
	{
	Mode_IfResult2 = Context.MapSpawn.UniformRangedFloat004.RandomnessMode;
	Override_IfResult2 = Context.MapSpawn.UniformRangedFloat004.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant40;
	Override_IfResult2 = Constant41;
	}
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed, RandomRangeFloat_Func_Output_Result2, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result2;
}

void NormalizedAngleToDegrees001_Emitter_Func_(out float Out_NewOutput, inout FSimulationContext Context)
{
	float Constant44 = 360;
	float Result8 = Context.MapSpawn.NormalizedAngleToDegrees001.NormalizedAngle * Constant44;
	Out_NewOutput = Result8;
}

void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant47 = false;
	float3 Constant48 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant47)
	{
	Vector_IfResult = Constant48;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant53 = false;
	float3 Constant54 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant53)
	{
	Vector_IfResult1 = Constant54;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant61 = (0);
	bool Constant62 = false;
	int Constant63 = 0;
	int Constant64 = (0);
	bool Constant65 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant61, In_OverrideSeed, Constant63, Constant64, Constant65, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float Result9 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float Result10 = rand_float(Result9, Seed11, Seed21, Seed31);
	float Result11 = rand_float(Result9);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result10;
	}
	else
	{
	Random_IfResult1 = Result11;
	}
	float Result12 = In_Min + Random_IfResult1;
	Out_Result = Result12;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant86 = (0);
	bool Constant87 = false;
	int Constant88 = 0;
	int Constant89 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant86, In_OverrideSeed, Constant88, Constant89, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float3 Result16 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float3 Result17 = rand_float(Result16, Seed12, Seed22, Seed32);
	float3 Result18 = rand_float(Result16);
	float3 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result17;
	}
	else
	{
	Random_IfResult2 = Result18;
	}
	float3 Result19 = In_Min + Random_IfResult2;
	Out_Result = Result19;
}

void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant81 = 0;
	float Constant82 = -1;
	float Constant83 = 3;
	float Result13 = pow(In_InnerRadius,Constant83);
	float3 Output11;
	Output11.x = Constant81;
	Output11.y = Constant82;
	Output11.z = Result13;
	float Result14 = TWO_PI;
	float Constant84 = 1;
	float Constant85 = 3;
	float Result15 = pow(In_OuterRadius,Constant85);
	float3 Output12;
	Output12.x = Result14;
	Output12.y = Constant84;
	Output12.z = Result15;
	float3 RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Output11, Output12, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result4, Context);
	float Phi;
	float CosASC40ThetaASC41;
	float RASC943;
	Phi = RandomRangeFloat_Func_Output_Result4.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result4.y;
	RASC943 = RandomRangeFloat_Func_Output_Result4.z;
	float Result20 = cos(Phi);
	float Result21 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result22 = 1 - Result21;
	float Result23 = sqrt(Result22);
	float Result24 = Result20 * Result23;
	float Result25 = sin(Phi);
	float Result26 = Result25 * Result23;
	float3 Output13;
	Output13.x = Result24;
	Output13.y = Result26;
	Output13.z = CosASC40ThetaASC41;
	float Constant90 = 0.333333;
	float Result27 = pow(RASC943,Constant90);
	float3 Result28 = Output13 * Result27;
	Out_Ouput = Result28;
}

void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output)
{

Out_Output = float3(In_X, In_Y, In_Z);
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant94 = 0;
	bool Result33 = NiagaraAll(In_SourceSpace == Constant94);
	int Constant95 = 0;
	bool Result34 = NiagaraAll(In_DestinationSpace == Constant95);
	bool Result35 = Result33 && Result34;
	int Constant96 = 1;
	bool Result36 = NiagaraAll(In_SourceSpace == Constant96);
	int Constant97 = 1;
	bool Result37 = NiagaraAll(In_DestinationSpace == Constant97);
	bool Result38 = Result36 && Result37;
	bool Result39 = Result35 || Result38;
	int Constant98 = 2;
	bool Result40 = NiagaraAll(In_SourceSpace == Constant98);
	int Constant99 = 2;
	bool Result41 = NiagaraAll(In_DestinationSpace == Constant99);
	bool Result42 = Result40 && Result41;
	bool Result43 = Result39 || Result42;
	bool Result44 = Result33 && Result41;
	bool Result45 = Result40 && Result34;
	bool Result46 = Result44 || Result45;
	bool Result47 = In_bLocalSpace && Result46;
	bool Result48 = Result43 || Result47;
	bool Result49 = !In_bLocalSpace;
	bool Result50 = Result33 && Result37;
	bool Result51 = Result36 && Result34;
	bool Result52 = Result50 || Result51;
	bool Result53 = Result49 && Result52;
	bool Result54 = Result48 || Result53;
	bool Result55 = In_bLocalSpace && Result50;
	bool Result56 = Result40 && Result37;
	bool Result57 = Result55 || Result56;
	bool Result58 = Result49 && Result45;
	bool Result59 = Result57 || Result58;
	float4x4 Matrix_IfResult1;
	if(Result59)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result54;
	Out_OutTransform = Matrix_IfResult1;
}

void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant93 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant93, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result60 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult2 = In_InVector;
	}
	else
	{
	Vector_IfResult2 = Result60;
	}
	Out_OutVector = Vector_IfResult2;
}

void SphereLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant77 = 0;
	float Constant78 = 1;
	int Constant79 = 0;
	bool Constant80 = false;
	int Mode_IfResult3;
	bool Override_IfResult3;
	if(Context.MapSpawn.SphereLocation.OverrideRandomness)
	{
	Mode_IfResult3 = Context.MapSpawn.SphereLocation.RandomnessMode;
	Override_IfResult3 = Context.MapSpawn.SphereLocation.OverrideSeed;
	}
	else
	{
	Mode_IfResult3 = Constant79;
	Override_IfResult3 = Constant80;
	}
	float3 RandomPointInSphere_Func_Output_Ouput;
	RandomPointInSphere_Func_(Constant77, Constant78, Mode_IfResult3, Override_IfResult3, Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed, Context.MapSpawn.SphereLocation.FixedRandomSeed, RandomPointInSphere_Func_Output_Ouput, Context);
	Context.MapSpawn.Local.SphereLocation.SphereVector = RandomPointInSphere_Func_Output_Ouput;
	float3 Result29 = abs(Context.MapSpawn.Local.SphereLocation.SphereVector);
	float3 CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output;
	CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(Context.MapSpawn.SphereLocation.HemisphereX, Context.MapSpawn.SphereLocation.HemisphereY, Context.MapSpawn.SphereLocation.HemisphereZ, CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	float3 Result30 = lerp(Context.MapSpawn.Local.SphereLocation.SphereVector,Result29,CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result30;
	float3 Result31 = Context.MapSpawn.Constants.Emitter.SphereLocation.SphereRadius * Context.MapSpawn.Local.SphereLocation.SphereVector * Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale;
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result31;
	float3 Result32 = Context.MapSpawn.SphereLocation.SphereOrigin + Context.MapSpawn.Constants.Emitter.SphereLocation.Offset;
	int Constant91 = 0;
	bool Constant92 = true;
	float3 SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	SphereLocation_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Local.SphereLocation.SphereVector, Context.MapSpawn.SphereLocation.CoordinateSpace, Constant91, Constant92, SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result61 = Result32 + SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	float3 Result62 = normalize(SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector);
	Context.MapSpawn.Particles.Position = Result61;
	Context.MapSpawn.OUTPUT_VAR.SphereLocation.SphereNormal = Result62;
}

void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant104 = 0;
	bool Constant105 = false;
	int Mode_IfResult4;
	bool Override_IfResult4;
	if(Context.MapSpawn.UniformRangedFloat.OverrideRandomness)
	{
	Mode_IfResult4 = Context.MapSpawn.UniformRangedFloat.RandomnessMode;
	Override_IfResult4 = Context.MapSpawn.UniformRangedFloat.OverrideSeed;
	}
	else
	{
	Mode_IfResult4 = Constant104;
	Override_IfResult4 = Constant105;
	}
	float RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed, Mode_IfResult4, Override_IfResult4, Context.MapSpawn.UniformRangedFloat.FixedRandomSeed, RandomRangeFloat_Func_Output_Result5, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result5;
}

void PolarToCartesianCoordinates_Func_(float In_Theta, float In_Radius, float In_Period, out float2 Out_XY, out float Out_X, out float Out_Y, out float2 Out_dXdY, out float Out_dX, out float Out_dY, inout FSimulationContext Context)
{
	float Result70 = cos(In_Theta*(TWO_PI/In_Period));
	float Result71 = In_Radius * Result70;
	float Result72 = sin(In_Theta*(TWO_PI/In_Period));
	float Result73 = In_Radius * Result72;
	float2 XY;
	XY.x = Result71;
	XY.y = Result73;
	float Constant131 = -1;
	float Result74 = Result72 * Constant131;
	float2 dXdY;
	dXdY.x = Result74;
	dXdY.y = Result70;
	Out_XY = XY;
	Out_X = Result71;
	Out_Y = Result73;
	Out_dXdY = dXdY;
	Out_dX = Result74;
	Out_dY = Result70;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result77 = length(In_V);
	bool Result78 = NiagaraAll(Result77 < In_Threshold);
	float Result79 = length(In_Fallback);
	float3 Vector_IfResult3;
	float float_IfResult1;
	if(Result78)
	{
	Vector_IfResult3 = In_Fallback;
	float_IfResult1 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult3 = In_V;
	float_IfResult1 = Result77;
	}
	float3 Result80 = Vector_IfResult3 / float_IfResult1;
	float3 Vector_IfResult4;
	float float_IfResult2;
	if(Result78)
	{
	Vector_IfResult4 = In_Fallback;
	float_IfResult2 = Result79;
	}
	else
	{
	Vector_IfResult4 = Result80;
	float_IfResult2 = float_IfResult1;
	}
	Out_Direction = Vector_IfResult4;
	Out_Length = float_IfResult2;
	Out_BelowThreshold = Result78;
}

void RandomVectorInCone_Func_(float In_ConeAngle, float In_ConePointDistribution, bool In_EnableCurvature, float In_ConeCurvature, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, out float3 Out_NormalizedVector, inout FSimulationContext Context)
{
	float Constant116 = 0;
	float Constant117 = 1;
	bool Constant118 = false;
	float RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Constant116, Constant117, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant118, RandomRangeFloat_Func_Output_Result6, Context);
	float Constant119 = 0;
	float Constant120 = 1;
	bool Constant121 = false;
	float RandomRangeFloat_Func_Output_Result7;
	RandomRangeFloat_Func_(Constant119, Constant120, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant121, RandomRangeFloat_Func_Output_Result7, Context);
	float Result64 = pow(RandomRangeFloat_Func_Output_Result7,In_ConePointDistribution);
	float Constant122 = 1e-05;
	float Constant123 = 179.875;
	float Result65 = clamp(In_ConeAngle,Constant122,Constant123);
	float Constant124 = 0.5;
	float Result66 = Result65 * Constant124;
	float Result67 = tan((PI/180.0f)*Result66);
	float Constant125 = 0;
	float Constant126 = 1;
	bool Constant127 = false;
	float RandomRangeFloat_Func_Output_Result8;
	RandomRangeFloat_Func_(Constant125, Constant126, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant127, RandomRangeFloat_Func_Output_Result8, Context);
	float Constant128 = 0.0001;
	float Constant129 = 10;
	float Result68 = clamp(In_ConeCurvature,Constant128,Constant129);
	float Result69 = pow(RandomRangeFloat_Func_Output_Result6,Result68);
	float float_IfResult;
	if(In_EnableCurvature)
	{
	float_IfResult = Result69;
	}
	else
	{
	float_IfResult = RandomRangeFloat_Func_Output_Result6;
	}
	float Constant130 = 1;
	float2 PolarToCartesianCoordinates_Func_Output_XY;
	float PolarToCartesianCoordinates_Func_Output_X;
	float PolarToCartesianCoordinates_Func_Output_Y;
	float2 PolarToCartesianCoordinates_Func_Output_dXdY;
	float PolarToCartesianCoordinates_Func_Output_dX;
	float PolarToCartesianCoordinates_Func_Output_dY;
	PolarToCartesianCoordinates_Func_(RandomRangeFloat_Func_Output_Result8, float_IfResult, Constant130, PolarToCartesianCoordinates_Func_Output_XY, PolarToCartesianCoordinates_Func_Output_X, PolarToCartesianCoordinates_Func_Output_Y, PolarToCartesianCoordinates_Func_Output_dXdY, PolarToCartesianCoordinates_Func_Output_dX, PolarToCartesianCoordinates_Func_Output_dY, Context);
	float2 Result75 = Result67 * PolarToCartesianCoordinates_Func_Output_XY;
	float2 Result76 = Result64 * Result75;
	float X;
	float Y;
	X = Result76.x;
	Y = Result76.y;
	float3 Output14;
	Output14.x = RandomRangeFloat_Func_Output_Result6;
	Output14.y = X;
	Output14.z = Y;
	float3 Constant132 = float3(1,0,0);
	float Constant133 = 1e-05;
	float Constant134 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Output14, Constant132, Constant133, Constant134, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	Out_Vector = Output14;
	Out_NormalizedVector = DirectionAndLengthSafe_Func_Output_Direction;
}

void RemapValueRange_Func_(float In_INPUT_VAR, float In_InputLow, float In_InputHigh, float In_TargetLow, float In_TargetHigh, out float Out_Remapped, inout FSimulationContext Context)
{
	float Result84 = In_INPUT_VAR - In_InputLow;
	float Result85 = In_InputHigh - In_InputLow;
	float Result86 = Result84 / Result85;
	float Result87 = In_TargetHigh - In_TargetLow;
	float Result88 = Result86 * Result87;
	float Result89 = Result88 + In_TargetLow;
	Out_Remapped = Result89;
}

void AddVelocityInCone_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant145 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant145, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result92 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult5;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult5 = In_InVector;
	}
	else
	{
	Vector_IfResult5 = Result92;
	}
	Out_OutVector = Vector_IfResult5;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result)
{



		float NormAB = 1.0f;
	    float NormFactor = sqrt((In_From.x*In_From.x + In_From.y*In_From.y + In_From.z*In_From.z) * (In_To.x*In_To.x + In_To.y*In_To.y + In_To.z*In_To.z));

	    if (In_InputsAreNormalized)
	    {
	         NormAB = 1.0f;
	    }
	    else
	    {
	         NormAB = NormFactor;
	   }

		float w = NormAB + dot(In_From, In_To);
	    float4 Result1 = float4(In_From.y * In_To.z - In_From.z * In_To.y,
						   In_From.z * In_To.x - In_From.x * In_To.z,
						   In_From.x * In_To.y - In_From.y * In_To.x,
						   w);
		float4 Result2 = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	    float4 Result3 = float4(0.0f, -In_From.z, In_From.y, 0.0f);


	    if (abs(In_From.x) > abs(In_From.y))
	    {
	        Out_Result = Result2;
	    }
	    else
	    {
	        Out_Result = Result3;
	    }


		if (w >= 3.4e-4f * NormAB)
		{

			Out_Result = Result1;
		}

		Out_Result = normalize(Out_Result);

}

void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(In_InputsAreNormalized, In_From, In_To, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output0;
	float Output15;
	Output0.x = In_Quaternion.x;
	Output0.y = In_Quaternion.y;
	Output0.z = In_Quaternion.z;
	Output15 = In_Quaternion.w;
	float Result93 = dot(Output0,In_VECTOR_VAR);
	float Constant147 = 2;
	float Result94 = Result93 * Constant147;
	float3 Result95 = Output0 * Result94;
	float Result96 = Output15 * Output15;
	float Result97 = dot(Output0,Output0);
	float Result98 = Result96 - Result97;
	float3 Result99 = Result98 * In_VECTOR_VAR;
	float3 Result100 = Result95 + Result99;
	float3 Result101 = cross(Output0,In_VECTOR_VAR);
	float Constant148 = 2;
	float Result102 = Output15 * Constant148;
	float3 Result103 = Result101 * Result102;
	float3 Result104 = Result100 + Result103;
	Out_Vector = Result104;
}

void AddVelocityInCone_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant110 = 1e-05;
	float Result63 = max(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAngle, Constant110);
	bool Constant111 = false;
	float Constant112 = 1;
	int Constant113 = -1;
	int Constant114 = 0;
	bool Constant115 = false;
	float3 RandomVectorInCone_Func_Output_Vector;
	float3 RandomVectorInCone_Func_Output_NormalizedVector;
	RandomVectorInCone_Func_(Result63, Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityDistributionAlongConeAxis, Constant111, Constant112, Constant113, Constant114, Constant115, RandomVectorInCone_Func_Output_Vector, RandomVectorInCone_Func_Output_NormalizedVector, Context);
	float3 Constant135 = float3(1,0,0);
	float Result81 = dot(Constant135,RandomVectorInCone_Func_Output_NormalizedVector);
	float Constant136 = 0.5;
	float Result82 = Result63 * Constant136;
	float Result83 = cos((PI/180.0f)*Result82);
	float Constant137 = 1;
	float Constant138 = 0;
	float Constant139 = 1;
	float RemapValueRange_Func_Output_Remapped;
	RemapValueRange_Func_(Result81, Result83, Constant137, Constant138, Constant139, RemapValueRange_Func_Output_Remapped, Context);
	float Constant140 = 0;
	float Constant141 = 1;
	float Result90 = clamp(RemapValueRange_Func_Output_Remapped,Constant140,Constant141);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = RandomVectorInCone_Func_Output_NormalizedVector;
	Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis = Result90;
	float3 Constant142 = float3(1,0,0);
	float3 Result91 = normalize(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAxis);
	int Constant143 = 0;
	bool Constant144 = false;
	float3 AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityInCone_NF_TransformVector_Emitter_Func_(Result91, Context.MapSpawn.AddVelocityInCone.ConeAxisCoordinateSpace, Constant143, Constant144, AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	bool Constant146 = false;
	float4 FindQuatBetween_Func_Output_NewOutput;
	FindQuatBetween_Func_(Constant142, AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector, Constant146, FindQuatBetween_Func_Output_NewOutput, Context);
	float3 MultiplyVectorWithQuaternion_Func_Output_Vector;
	MultiplyVectorWithQuaternion_Func_(Context.MapSpawn.Local.AddVelocityInCone.ConeVector, FindQuatBetween_Func_Output_NewOutput, MultiplyVectorWithQuaternion_Func_Output_Vector, Context);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = MultiplyVectorWithQuaternion_Func_Output_Vector;
	float Constant149 = 0.0001;
	float Result105 = max(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityFalloffAwayFromConeAxis, Constant149);
	float Result106 = pow(Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis,Result105);
	float Result107 = Context.MapSpawn.AddVelocityInCone.VelocityStrength * Result106;
	float float_IfResult3;
	if(Context.MapSpawn.AddVelocityInCone.UseVelocityFalloffOnConeAxis)
	{
	float_IfResult3 = Result107;
	}
	else
	{
	float_IfResult3 = Context.MapSpawn.AddVelocityInCone.VelocityStrength;
	}
	float3 Result108 = Context.MapSpawn.Local.AddVelocityInCone.ConeVector * float_IfResult3;
	float3 Result109 = Context.MapSpawn.Particles.Velocity + Result108;
	Context.MapSpawn.Particles.Velocity = Result109;
}

void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context)
{
	int Constant154 = 0;
	bool Constant155 = false;
	int Mode_IfResult5;
	bool Override_IfResult5;
	if(Context.MapSpawn.UniformRangedVector.OverrideRandomness)
	{
	Mode_IfResult5 = Context.MapSpawn.UniformRangedVector.RandomnessMode;
	Override_IfResult5 = Context.MapSpawn.UniformRangedVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult5 = Constant154;
	Override_IfResult5 = Constant155;
	}
	float3 RandomRangeFloat_Func_Output_Result9;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedVector.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedVector.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedVector.RandomSeed, Mode_IfResult5, Override_IfResult5, Context.MapSpawn.UniformRangedVector.FixedRandomSeed, RandomRangeFloat_Func_Output_Result9, Context);
	Out_UniformRangedVector = RandomRangeFloat_Func_Output_Result9;
}

void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant162 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant162, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result110 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult6;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult6 = In_InVector;
	}
	else
	{
	Vector_IfResult6 = Result110;
	}
	Out_OutVector = Vector_IfResult6;
}

void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result)
{

float4 SIGN_MASK0 = float4( 1.f, -1.f, 1.f, -1.f );
	float4 SIGN_MASK1 = float4( 1.f, 1.f, -1.f, -1.f );
	float4 SIGN_MASK2 = float4( -1.f, 1.f, 1.f, -1.f );
	Out_Result = (In_Quat1.wwww * In_Quat2);
	Out_Result = ((In_Quat1.xxxx * In_Quat2.wzyx) * SIGN_MASK0) + Out_Result;
	Out_Result = ((In_Quat1.yyyy * In_Quat2.zwxy)* SIGN_MASK1) + Out_Result;
	Out_Result = ((In_Quat1.zzzz * In_Quat2.yxwz)* SIGN_MASK2) + Out_Result;
}

void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float4 CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
	CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(In_QuaternionA, In_QuaternionB, CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result);
	Out_Quaternion = CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
}

void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Constant157 = float3(1,0,0);
	float Constant158 = 1e-05;
	float Constant159 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationAxis, Constant157, Constant158, Constant159, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	int Constant160 = 0;
	bool Constant161 = false;
	float3 InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector;
	InitialMeshOrientation_TransformVector_Emitter_Func_(DirectionAndLengthSafe_Func_Output_Direction1, Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace, Constant160, Constant161, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Context);
	int Constant163 = 0;
	bool Constant164 = false;
	float3 InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector1;
	InitialMeshOrientation_TransformVector_Emitter_Func_(Context.MapSpawn.InitialMeshOrientation.OrientationVector, Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace, Constant163, Constant164, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector1, Context);
	float Constant165 = 1e-05;
	float Constant166 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector1, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Constant165, Constant166, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	bool Constant167 = false;
	float4 FindQuatBetween_Func_Output_NewOutput1;
	FindQuatBetween_Func_(InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, DirectionAndLengthSafe_Func_Output_Direction2, Constant167, FindQuatBetween_Func_Output_NewOutput1, Context);
	float4 MultiplyQuaternion_Func_Output_Quaternion;
	MultiplyQuaternion_Func_(FindQuatBetween_Func_Output_NewOutput1, Context.MapSpawn.Particles.MeshOrientation, MultiplyQuaternion_Func_Output_Quaternion, Context);
	Context.MapSpawn.Particles.InitialRotation = MultiplyQuaternion_Func_Output_Quaternion;
	Context.MapSpawn.Particles.MeshOrientation = MultiplyQuaternion_Func_Output_Quaternion;
	Context.MapSpawn.InitialMeshOrientation.OrientationVector = Context.MapSpawn.InitialMeshOrientation.OrientationVector;
	bool Constant168 = false;
	Context.MapSpawn.Local.InitialMeshOrientation.Temp = Constant168;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result111 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result111;
	float Result112 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant170 = 1e-05;
	float Result113 = max(Context.MapUpdate.ParticleState.Lifetime, Constant170);
	float Constant171 = 0.0001;
	float Result114 = Result113 - Constant171;
	bool Result115 = NiagaraAll(Result112 < Result114);
	bool Constant172 = false;
	bool bool_IfResult;
	if(Result115)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant172;
	}
	float Result116 = Result112 / Result113;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result112;
	Context.MapUpdate.Particles.NormalizedAge = Result116;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result117 = Context.MapUpdate.Constants.Emitter.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	float3 Result118 = Context.MapUpdate.Transient.PhysicsForce + Result117;
	Context.MapUpdate.Transient.PhysicsForce = Result118;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	float Result119 = Context.MapUpdate.Constants.Emitter.Drag.Drag + Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Transient.PhysicsDrag = Result119;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Context.MapUpdate.Transient.PhysicsRotationalDrag;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve(Context.MapUpdate.FloatFromCurve.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value);
	float Result120 = SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result120;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output01;
	Output01.r = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output01.g = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output01.b = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output01.a = Context.MapUpdate.ScaleColor.ScaleAlpha;
	float4 Result121 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output01;
	float4 Result122 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result121;
	Context.MapUpdate.Particles.Color = Result122;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result121;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant184 = 0.0001;
	float Result123 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant184);
	float Result124 = Reciprocal(Result123);
	float3 Result125 = Result124 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result125;
	float3 Result126 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant185 = 0;
	float Result127 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant185);
	float Result128 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result127;
	float Constant186 = 1;
	float Result129 = Result128 + Constant186;
	float3 Result130 = Result126 / Result129;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result130;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result131 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result131;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant187 = float3(0,0,0);
	float Constant188 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant187;
	Drag_IfResult = Constant188;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void VectorFromCurve_Emitter_Func_(out float3 Out_Value, inout FSimulationContext Context)
{
	float3 SampleVectorCurve_EmitterScaleFactorVectorCurveOutput_Value;
	SampleVectorCurve_EmitterScaleFactorVectorCurve(Context.MapUpdate.VectorFromCurve.CurveIndex, SampleVectorCurve_EmitterScaleFactorVectorCurveOutput_Value);
	Out_Value = SampleVectorCurve_EmitterScaleFactorVectorCurveOutput_Value;
}

void ScaleMeshSize_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result132 = Context.MapUpdate.ScaleMeshSize.ScaleFactor * Context.MapUpdate.Transient.MeshScaleFactor;
	float3 Result133 = Context.MapUpdate.ScaleMeshSize.InitialMeshScale * Result132;
	Context.MapUpdate.Particles.Scale = Result133;
	Context.MapUpdate.Transient.MeshScaleFactor = Result132;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float3 Constant7 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant7;
	float4 Constant8 = float4(0,0,0,1);
	Context.MapSpawn.Particles.MeshOrientation = Constant8;
	float4 Constant9 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.InitialRotation = Constant9;
	float Constant10 = 0;
	Context.MapSpawn.Particles.Age = Constant10;
	float Constant11 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant11;

	bool Constant12 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideRandomness = Constant12;
	int Constant13 = 0;
	Context.MapSpawn.UniformRangedFloat005.RandomnessMode = Constant13;
	bool Constant14 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideSeed = Constant14;
	bool Constant15 = false;
	Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed = Constant15;
	float UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat005_Emitter_Func_(UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.NormalizedAngleToDegrees001.NormalizedAngle = UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	bool Constant30 = false;
	Context.MapSpawn.UniformRangedFloat003.OverrideRandomness = Constant30;
	int Constant31 = 0;
	Context.MapSpawn.UniformRangedFloat003.RandomnessMode = Constant31;
	bool Constant32 = false;
	Context.MapSpawn.UniformRangedFloat003.OverrideSeed = Constant32;
	bool Constant33 = false;
	Context.MapSpawn.UniformRangedFloat003.FixedRandomSeed = Constant33;
	float UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat003_Emitter_Func_(UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant36 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideRandomness = Constant36;
	int Constant37 = 0;
	Context.MapSpawn.UniformRangedFloat004.RandomnessMode = Constant37;
	bool Constant38 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideSeed = Constant38;
	bool Constant39 = false;
	Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed = Constant39;
	float UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat004_Emitter_Func_(UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant42 = true;
	bool Constant43 = true;
	float NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput;
	NormalizedAngleToDegrees001_Emitter_Func_(NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput, Context);
	bool Constant45 = false;
	bool Constant46 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant49 = true;
	Context.MapSpawn.InitializeParticle.Lifetime = UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.Mass = UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant42;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant43;
	Context.MapSpawn.InitializeParticle.SpriteRotation = NormalizedAngleToDegrees001_Emitter_Func_Output_NewOutput;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant45;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant49;
	bool Constant50 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant50;
	bool Constant51 = true;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant51;
	bool Constant52 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant52;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant55 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant55;
	float Constant56 = 0;
	float Constant57 = 1;
	int Constant58 = -1;
	int Constant59 = 0;
	bool Constant60 = false;
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Constant56, Constant57, Constant58, Constant59, Constant60, RandomRangeFloat_Func_Output_Result3, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result3;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant66 = false;
	bool Constant67 = false;
	bool Constant68 = false;
	bool Constant69 = true;
	Context.MapSpawn.SphereLocation.HemisphereX = Constant66;
	Context.MapSpawn.SphereLocation.HemisphereY = Constant67;
	Context.MapSpawn.SphereLocation.HemisphereZ = Constant68;
	Context.MapSpawn.SphereLocation.NormalizeThickness = Constant69;
	bool Constant70 = false;
	Context.MapSpawn.SphereLocation.OverrideRandomness = Constant70;
	int Constant71 = 0;
	Context.MapSpawn.SphereLocation.RandomnessMode = Constant71;
	bool Constant72 = false;
	Context.MapSpawn.SphereLocation.OverrideSeed = Constant72;
	int Constant73 = 0;
	Context.MapSpawn.SphereLocation.SurfaceExpansionMode = Constant73;
	bool Constant74 = false;
	Context.MapSpawn.SphereLocation.FixedRandomSeed = Constant74;
	float3 Constant75 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Constant75;
	Context.MapSpawn.SphereLocation.SphereOrigin = Context.MapSpawn.Particles.Position;
	int Constant76 = 2;
	Context.MapSpawn.SphereLocation.CoordinateSpace = Constant76;
	EnterStatScope(2 );
	SphereLocation_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant100 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideRandomness = Constant100;
	int Constant101 = 0;
	Context.MapSpawn.UniformRangedFloat.RandomnessMode = Constant101;
	bool Constant102 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideSeed = Constant102;
	bool Constant103 = false;
	Context.MapSpawn.UniformRangedFloat.FixedRandomSeed = Constant103;
	float UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat_Emitter_Func_(UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant106 = false;
	Context.MapSpawn.AddVelocityInCone.VelocityStrength = UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.AddVelocityInCone.UseVelocityFalloffOnConeAxis = Constant106;
	float3 Constant107 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = Constant107;
	float Constant108 = (0.0);
	Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis = Constant108;
	int Constant109 = 2;
	Context.MapSpawn.AddVelocityInCone.ConeAxisCoordinateSpace = Constant109;
	EnterStatScope(3 );
	AddVelocityInCone_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant150 = false;
	Context.MapSpawn.UniformRangedVector.OverrideRandomness = Constant150;
	int Constant151 = 0;
	Context.MapSpawn.UniformRangedVector.RandomnessMode = Constant151;
	bool Constant152 = false;
	Context.MapSpawn.UniformRangedVector.OverrideSeed = Constant152;
	bool Constant153 = false;
	Context.MapSpawn.UniformRangedVector.FixedRandomSeed = Constant153;
	float3 UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	UniformRangedVector_Emitter_Func_(UniformRangedVector_Emitter_Func_Output_UniformRangedVector, Context);
	Context.MapSpawn.InitialMeshOrientation.OrientationVector = UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	int Constant156 = 0;
	Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace = Constant156;
	EnterStatScope(4 );
	InitialMeshOrientation_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;

	Context.MapSpawn.Particles.Initial.Scale = Context.MapSpawn.Particles.Scale;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant169 = true;
	Context.MapUpdate.DataInstance.Alive = Constant169;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(5 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant173 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant173;
	EnterStatScope(6 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant174 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant174;
	float Constant175 = 0;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Constant175;
	EnterStatScope(7 );
	Drag_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleColor.ScaleAlpha = FloatFromCurve_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant176 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant176;
	EnterStatScope(8 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant177 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant177;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant178 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant178;
	float3 Constant179 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant179;
	float Constant180 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant180;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	bool Constant181 = false;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant182 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant182;
	bool Constant183 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant183;
	EnterStatScope(9 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.VectorFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float3 VectorFromCurve_Emitter_Func_Output_Value;
	VectorFromCurve_Emitter_Func_(VectorFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleMeshSize.ScaleFactor = VectorFromCurve_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleMeshSize.InitialMeshScale = Context.MapUpdate.Particles.Initial.Scale;
	float3 Constant189 = float3(1,1,1);
	Context.MapUpdate.Transient.MeshScaleFactor = Constant189;
	EnterStatScope(10 );
	ScaleMeshSize_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(11 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Initial.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Initial.Scale.z = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.x = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.y = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.z = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.w = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.x = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.y = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.z = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.w = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum = Constants_Emitter_UniformRangedFloat005_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum = Constants_Emitter_UniformRangedFloat005_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed = Constants_Emitter_UniformRangedFloat005_RandomSeed;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Minimum = Constants_Emitter_UniformRangedFloat003_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Maximum = Constants_Emitter_UniformRangedFloat003_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.RandomSeed = Constants_Emitter_UniformRangedFloat003_RandomSeed;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum = Constants_Emitter_UniformRangedFloat004_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum = Constants_Emitter_UniformRangedFloat004_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed = Constants_Emitter_UniformRangedFloat004_RandomSeed;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed = Constants_Emitter_SphereLocation_RandomSeed;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SurfaceOnlyBandThickness = Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SphereRadius = Constants_Emitter_SphereLocation_SphereRadius;
	Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale = Constants_Emitter_SphereLocation_NonUniformScale;
	Context.MapSpawn.Constants.Emitter.SphereLocation.Offset = Constants_Emitter_SphereLocation_Offset;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SpawnGroupMask = Constants_Emitter_SphereLocation_SpawnGroupMask;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum = Constants_Emitter_UniformRangedFloat_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum = Constants_Emitter_UniformRangedFloat_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed = Constants_Emitter_UniformRangedFloat_RandomSeed;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAngle = Constants_Emitter_AddVelocityInCone_ConeAngle;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityDistributionAlongConeAxis = Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAxis = Constants_Emitter_AddVelocityInCone_ConeAxis;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityFalloffAwayFromConeAxis = Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.Minimum = Constants_Emitter_UniformRangedVector_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.Maximum = Constants_Emitter_UniformRangedVector_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedVector.RandomSeed = Constants_Emitter_UniformRangedVector_RandomSeed;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationAxis = Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.Rotation = Constants_Emitter_InitialMeshOrientation_Rotation;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity;
	Context.MapUpdate.Constants.Emitter.Drag.Drag = Constants_Emitter_Drag_Drag;
	Context.MapUpdate.Constants.Emitter.Drag.RotationalDrag = Constants_Emitter_Drag_RotationalDrag;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Scale.x);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Scale.y);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Scale.z);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.w);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.x);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.y);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.z);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.w);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
